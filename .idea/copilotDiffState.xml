<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/couple_app/activities/WelcomeActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/couple_app/activities/WelcomeActivity.java" />
              <option name="originalContent" value="package com.example.couple_app.activities;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.widget.Toast;&#10;import android.os.Build;&#10;import android.view.View;&#10;import androidx.activity.result.ActivityResultLauncher;&#10;import androidx.activity.result.contract.ActivityResultContracts;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.view.WindowCompat;&#10;import androidx.core.view.WindowInsetsControllerCompat;&#10;&#10;import com.example.couple_app.R;&#10;import com.example.couple_app.utils.LoginPreferences;&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn;&#10;import com.google.android.gms.auth.api.signin.GoogleSignInAccount;&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient;&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions;&#10;import com.google.android.gms.common.api.ApiException;&#10;import com.google.android.gms.tasks.Task;&#10;import com.google.firebase.auth.AuthCredential;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseUser;&#10;import com.google.firebase.auth.GoogleAuthProvider;&#10;&#10;public class WelcomeActivity extends AppCompatActivity {&#10;    @SuppressWarnings(&quot;deprecation&quot;)&#10;    private GoogleSignInClient mGoogleSignInClient;&#10;    private ActivityResultLauncher&lt;Intent&gt; googleSignInLauncher;&#10;    private FirebaseAuth mAuth;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;&#10;        try {&#10;            // Thiết lập navigation bar trong suốt trước khi load layout&#10;            setupTransparentSystemBars();&#10;&#10;            setContentView(R.layout.welcome);&#10;&#10;            // Initialize Firebase Auth&#10;            mAuth = FirebaseAuth.getInstance();&#10;&#10;            // Configure Google Sign In&#10;            GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;                    .requestIdToken(getString(R.string.default_web_client_id))&#10;                    .requestEmail()&#10;                    .build();&#10;&#10;            mGoogleSignInClient = GoogleSignIn.getClient(this, gso);&#10;&#10;            // Initialize Google Sign-In launcher&#10;            googleSignInLauncher = registerForActivityResult(&#10;                    new ActivityResultContracts.StartActivityForResult(),&#10;                    result -&gt; {&#10;                        if (result.getResultCode() == RESULT_OK &amp;&amp; result.getData() != null) {&#10;                            Task&lt;GoogleSignInAccount&gt; task = GoogleSignIn.getSignedInAccountFromIntent(result.getData());&#10;                            try {&#10;                                GoogleSignInAccount account = task.getResult(ApiException.class);&#10;                                firebaseAuthWithGoogle(account.getIdToken());&#10;                            } catch (ApiException e) {&#10;                                Toast.makeText(this, &quot;Google sign in failed: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                            }&#10;                        }&#10;                    });&#10;&#10;            setupClickListeners();&#10;        } catch (Exception e) {&#10;            // Log error và không crash app&#10;            android.util.Log.e(&quot;WelcomeActivity&quot;, &quot;Error in onCreate&quot;, e);&#10;        }&#10;    }&#10;&#10;    // Phương thức thiết lập navigation bar và status bar trong suốt&#10;    private void setupTransparentSystemBars() {&#10;        // Enable edge-to-edge display&#10;        WindowCompat.setDecorFitsSystemWindows(getWindow(), false);&#10;&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {&#10;            // Thiết lập status bar và navigation bar trong suốt&#10;            getWindow().setStatusBarColor(android.graphics.Color.TRANSPARENT);&#10;            getWindow().setNavigationBarColor(android.graphics.Color.TRANSPARENT);&#10;&#10;            // Thiết lập màu icon trên system bars&#10;            WindowInsetsControllerCompat controller = new WindowInsetsControllerCompat(getWindow(), getWindow().getDecorView());&#10;            controller.setAppearanceLightStatusBars(true);&#10;&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;                controller.setAppearanceLightNavigationBars(true);&#10;            }&#10;        }&#10;&#10;        // Tắt navigation bar contrast trên Android 10+&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.Q) {&#10;            getWindow().setNavigationBarContrastEnforced(false);&#10;        }&#10;&#10;        // Sử dụng WindowInsetsController thay vì deprecated system UI flags&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.R) {&#10;            // Android 11+ - Sử dụng WindowInsetsController&#10;            WindowInsetsControllerCompat controller = new WindowInsetsControllerCompat(getWindow(), getWindow().getDecorView());&#10;            controller.setSystemBarsBehavior(WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE);&#10;        } else {&#10;            // Android 10 và thấp hơn - Sử dụng deprecated flags (nhưng vẫn cần thiết cho compatibility)&#10;            getWindow().getDecorView().setSystemUiVisibility(&#10;                View.SYSTEM_UI_FLAG_LAYOUT_STABLE |&#10;                View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION |&#10;                View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN&#10;            );&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Chỉ check login state khi activity đã được resume hoàn toàn&#10;        checkLoginState();&#10;    }&#10;&#10;    private void checkLoginState() {&#10;        // Đảm bảo activity không bị destroyed&#10;        if (isDestroyed() || isFinishing()) {&#10;            return;&#10;        }&#10;&#10;        try {&#10;            // Check SharedPreferences first&#10;            if (LoginPreferences.isLoggedIn(this)) {&#10;                // Also check Firebase Auth state&#10;                FirebaseUser currentUser = mAuth.getCurrentUser();&#10;                if (currentUser != null) {&#10;                    // User is still authenticated, go to home&#10;                    navigateToHome(currentUser);&#10;                } else {&#10;                    // Firebase session expired, clear saved login state&#10;                    LoginPreferences.clearLoginState(this);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            android.util.Log.e(&quot;WelcomeActivity&quot;, &quot;Error checking login state&quot;, e);&#10;        }&#10;    }&#10;&#10;    private void navigateToHome(FirebaseUser user) {&#10;        // Đảm bảo activity không bị destroyed trước khi navigate&#10;        if (isDestroyed() || isFinishing()) {&#10;            return;&#10;        }&#10;&#10;        // First check if user needs pairing&#10;        checkPairingStatus(user);&#10;    }&#10;&#10;    private void checkPairingStatus(FirebaseUser user) {&#10;        // Đảm bảo activity không bị destroyed&#10;        if (isDestroyed() || isFinishing()) {&#10;            return;&#10;        }&#10;&#10;        try {&#10;            // Check if user is already paired before going to HomeMainActivity&#10;            com.example.couple_app.managers.DatabaseManager databaseManager =&#10;                    com.example.couple_app.managers.DatabaseManager.getInstance();&#10;&#10;            databaseManager.getCoupleByUserId(user.getUid(), new com.example.couple_app.managers.DatabaseManager.DatabaseCallback&lt;com.example.couple_app.models.Couple&gt;() {&#10;                @Override&#10;                public void onSuccess(com.example.couple_app.models.Couple couple) {&#10;                    // Kiểm tra lại activity state trước khi navigate&#10;                    if (isDestroyed() || isFinishing()) {&#10;                        return;&#10;                    }&#10;&#10;                    // User is already paired, go to HomeMainActivity&#10;                    Intent intent = new Intent(WelcomeActivity.this, HomeMainActivity.class);&#10;                    if (user != null) {&#10;                        intent.putExtra(&quot;user_name&quot;, user.getDisplayName() != null ? user.getDisplayName() : LoginPreferences.getUserName(WelcomeActivity.this));&#10;                        intent.putExtra(&quot;user_email&quot;, user.getEmail());&#10;                        intent.putExtra(&quot;user_id&quot;, user.getUid());&#10;                        intent.putExtra(&quot;coupleId&quot;, couple.getCoupleId());&#10;                    }&#10;&#10;                    try {&#10;                        startActivity(intent);&#10;                        finish();&#10;                    } catch (Exception e) {&#10;                        android.util.Log.e(&quot;WelcomeActivity&quot;, &quot;Error starting HomeMainActivity&quot;, e);&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    // Kiểm tra lại activity state trước khi navigate&#10;                    if (isDestroyed() || isFinishing()) {&#10;                        return;&#10;                    }&#10;&#10;                    // User is not paired yet, go to PairingActivity&#10;                    Intent intent = new Intent(WelcomeActivity.this, PairingActivity.class);&#10;                    try {&#10;                        startActivity(intent);&#10;                        finish();&#10;                    } catch (Exception e) {&#10;                        android.util.Log.e(&quot;WelcomeActivity&quot;, &quot;Error starting PairingActivity&quot;, e);&#10;                    }&#10;                }&#10;            });&#10;        } catch (Exception e) {&#10;            android.util.Log.e(&quot;WelcomeActivity&quot;, &quot;Error in checkPairingStatus&quot;, e);&#10;        }&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        // Setup click listeners using actual IDs from welcome.xml layout&#10;&#10;        // Phone login button -&gt; redirect to LoginByPhoneActivity&#10;        setupClickListener(R.id.btnLoginPhone, () -&gt; {&#10;            Intent intent = new Intent(WelcomeActivity.this, LoginByPhoneActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        // Email login button -&gt; redirect to Google login&#10;        setupClickListener(R.id.btnLoginMail, this::signInWithGoogle);&#10;&#10;        // Sign up text -&gt; redirect to SignUpActivity&#10;        setupClickListener(R.id.tv_signup, () -&gt; {&#10;            Intent intent = new Intent(WelcomeActivity.this, SignUpActivity.class);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    private void setupClickListener(int viewId, Runnable action) {&#10;        try {&#10;            android.view.View view = findViewById(viewId);&#10;            if (view != null) {&#10;                view.setOnClickListener(v -&gt; action.run());&#10;            }&#10;        } catch (Exception e) {&#10;            // Ignore if view ID doesn't exist&#10;        }&#10;    }&#10;&#10;    private void signInWithGoogle() {&#10;        // Clear any existing Google sign-in to force account selection&#10;        mGoogleSignInClient.signOut().addOnCompleteListener(this, task -&gt; {&#10;            // After signing out, start the sign-in process which will show account picker&#10;            Intent signInIntent = mGoogleSignInClient.getSignInIntent();&#10;            googleSignInLauncher.launch(signInIntent);&#10;        });&#10;    }&#10;&#10;    private void firebaseAuthWithGoogle(String idToken) {&#10;        AuthCredential credential = GoogleAuthProvider.getCredential(idToken, null);&#10;&#10;        // First, get the Google account info to check email&#10;        GoogleSignInAccount lastSignedInAccount = GoogleSignIn.getLastSignedInAccount(this);&#10;        if (lastSignedInAccount != null &amp;&amp; lastSignedInAccount.getEmail() != null) {&#10;            String googleEmail = lastSignedInAccount.getEmail();&#10;&#10;            // Check if this email exists in Firestore database&#10;            com.example.couple_app.managers.DatabaseManager.getInstance().checkEmailExists(&#10;                googleEmail,&#10;                new com.example.couple_app.managers.DatabaseManager.DatabaseCallback&lt;com.example.couple_app.models.User&gt;() {&#10;                    @Override&#10;                    public void onSuccess(com.example.couple_app.models.User existingUser) {&#10;                        if (existingUser != null) {&#10;                            // Email exists in database, proceed with Firebase Auth&#10;                            proceedWithGoogleLogin(credential);&#10;                        } else {&#10;                            // Email not found in database&#10;                            showAccountNotFoundDialog(googleEmail);&#10;                        }&#10;                    }&#10;&#10;                    @Override&#10;                    public void onError(String error) {&#10;                        Toast.makeText(WelcomeActivity.this,&#10;                            &quot;Lỗi kiểm tra tài khoản: &quot; + error, Toast.LENGTH_LONG).show();&#10;                    }&#10;                }&#10;            );&#10;        } else {&#10;            // Fallback: proceed with Firebase Auth if can't get email&#10;            proceedWithGoogleLogin(credential);&#10;        }&#10;    }&#10;&#10;    private void proceedWithGoogleLogin(AuthCredential credential) {&#10;        mAuth.signInWithCredential(credential)&#10;                .addOnCompleteListener(this, task -&gt; {&#10;                    if (task.isSuccessful()) {&#10;                        // Sign in success&#10;                        FirebaseUser user = mAuth.getCurrentUser();&#10;                        if (user != null) {&#10;                            // Save login state to SharedPreferences&#10;                            LoginPreferences.saveLoginState(&#10;                                    this,&#10;                                    true,&#10;                                    user.getEmail(),&#10;                                    user.getDisplayName() != null ? user.getDisplayName() : &quot;&quot;,&#10;                                    user.getUid()&#10;                            );&#10;&#10;                            Toast.makeText(this, &quot;Đăng nhập Google thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                            navigateToHome(user);&#10;                        }&#10;                    } else {&#10;                        // Sign in failed&#10;                        String errorMessage = task.getException() != null ? task.getException().getMessage() : &quot;Unknown error&quot;;&#10;                        Toast.makeText(this, errorMessage, Toast.LENGTH_LONG).show();&#10;                    }&#10;                });&#10;    }&#10;&#10;    private void showAccountNotFoundDialog(String email) {&#10;        new androidx.appcompat.app.AlertDialog.Builder(this)&#10;                .setTitle(&quot;Tài khoản chưa tồn tại&quot;)&#10;                .setMessage(&quot;Email &quot; + email + &quot; chưa được đăng ký trong hệ thống.\n\n&quot; +&#10;                           &quot;Bạn cần tạo tài khoản trước khi đăng nhập bằng Google.&quot;)&#10;                .setPositiveButton(&quot;Đăng ký ngay&quot;, (dialog, which) -&gt; {&#10;                    // Navigate to sign up screen&#10;                    Intent intent = new Intent(WelcomeActivity.this, SignUpActivity.class);&#10;                    intent.putExtra(&quot;google_email&quot;, email); // Pass Google email to pre-fill&#10;                    startActivity(intent);&#10;                })&#10;                .setNegativeButton(&quot;Đóng&quot;, (dialog, which) -&gt; {&#10;                    // Sign out from Google to clear selection&#10;                    mGoogleSignInClient.signOut();&#10;                })&#10;                .setCancelable(false)&#10;                .setIcon(android.R.drawable.ic_dialog_info)&#10;                .show();&#10;    }&#10;&#10;    @Override&#10;    protected void onStart() {&#10;        super.onStart();&#10;        // Check login state every time the activity starts&#10;        checkLoginState();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.couple_app.activities;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.widget.Toast;&#10;import android.os.Build;&#10;import android.view.View;&#10;import androidx.activity.result.ActivityResultLauncher;&#10;import androidx.activity.result.contract.ActivityResultContracts;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.view.WindowCompat;&#10;import androidx.core.view.WindowInsetsControllerCompat;&#10;&#10;import com.example.couple_app.R;&#10;import com.example.couple_app.utils.LoginPreferences;&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn;&#10;import com.google.android.gms.auth.api.signin.GoogleSignInAccount;&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient;&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions;&#10;import com.google.android.gms.common.api.ApiException;&#10;import com.google.android.gms.tasks.Task;&#10;import com.google.firebase.auth.AuthCredential;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseUser;&#10;import com.google.firebase.auth.GoogleAuthProvider;&#10;&#10;public class WelcomeActivity extends AppCompatActivity {&#10;    @SuppressWarnings(&quot;deprecation&quot;)&#10;    private GoogleSignInClient mGoogleSignInClient;&#10;    private ActivityResultLauncher&lt;Intent&gt; googleSignInLauncher;&#10;    private FirebaseAuth mAuth;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;&#10;        try {&#10;            // Thiết lập navigation bar trong suốt trước khi load layout&#10;            setupTransparentSystemBars();&#10;&#10;            setContentView(R.layout.welcome);&#10;&#10;            // Initialize Firebase Auth&#10;            mAuth = FirebaseAuth.getInstance();&#10;&#10;            // Configure Google Sign In&#10;            GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;                    .requestIdToken(getString(R.string.default_web_client_id))&#10;                    .requestEmail()&#10;                    .build();&#10;&#10;            mGoogleSignInClient = GoogleSignIn.getClient(this, gso);&#10;&#10;            // Initialize Google Sign-In launcher&#10;            googleSignInLauncher = registerForActivityResult(&#10;                    new ActivityResultContracts.StartActivityForResult(),&#10;                    result -&gt; {&#10;                        if (result.getResultCode() == RESULT_OK &amp;&amp; result.getData() != null) {&#10;                            Task&lt;GoogleSignInAccount&gt; task = GoogleSignIn.getSignedInAccountFromIntent(result.getData());&#10;                            try {&#10;                                GoogleSignInAccount account = task.getResult(ApiException.class);&#10;                                firebaseAuthWithGoogle(account.getIdToken());&#10;                            } catch (ApiException e) {&#10;                                Toast.makeText(this, &quot;Google sign in failed: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                            }&#10;                        }&#10;                    });&#10;&#10;            setupClickListeners();&#10;        } catch (Exception e) {&#10;            // Log error và không crash app&#10;            android.util.Log.e(&quot;WelcomeActivity&quot;, &quot;Error in onCreate&quot;, e);&#10;        }&#10;    }&#10;&#10;    // Phương thức thiết lập navigation bar và status bar trong suốt&#10;    private void setupTransparentSystemBars() {&#10;        try {&#10;            // Enable edge-to-edge display&#10;            WindowCompat.setDecorFitsSystemWindows(getWindow(), false);&#10;&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {&#10;                // Thiết lập status bar và navigation bar trong suốt&#10;                getWindow().setStatusBarColor(android.graphics.Color.TRANSPARENT);&#10;                &#10;                // Sử dụng màu an toàn cho navigation bar&#10;                int navBarColor = androidx.core.content.ContextCompat.getColor(this, R.color.couple_pink_bg);&#10;                getWindow().setNavigationBarColor(navBarColor);&#10;&#10;                // Thiết lập màu icon trên system bars&#10;                WindowInsetsControllerCompat controller = new WindowInsetsControllerCompat(getWindow(), getWindow().getDecorView());&#10;                controller.setAppearanceLightStatusBars(true);&#10;&#10;                if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;                    controller.setAppearanceLightNavigationBars(true);&#10;                }&#10;            }&#10;&#10;            // Tắt navigation bar contrast trên Android 10+&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.Q) {&#10;                getWindow().setNavigationBarContrastEnforced(false);&#10;            }&#10;&#10;            // Sử dụng WindowInsetsController thay vì deprecated system UI flags&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.R) {&#10;                // Android 11+ - Sử dụng WindowInsetsController&#10;                WindowInsetsControllerCompat controller = new WindowInsetsControllerCompat(getWindow(), getWindow().getDecorView());&#10;                controller.setSystemBarsBehavior(WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE);&#10;            } else {&#10;                // Android 10 và thấp hơn - Sử dụng deprecated flags (nhưng vẫn cần thiết cho compatibility)&#10;                getWindow().getDecorView().setSystemUiVisibility(&#10;                    View.SYSTEM_UI_FLAG_LAYOUT_STABLE |&#10;                    View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION |&#10;                    View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN&#10;                );&#10;            }&#10;        } catch (Exception e) {&#10;            android.util.Log.e(&quot;WelcomeActivity&quot;, &quot;Error setting up transparent system bars&quot;, e);&#10;            // Fallback: sử dụng màu mặc định&#10;            try {&#10;                if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {&#10;                    getWindow().setStatusBarColor(getResources().getColor(android.R.color.black, getTheme()));&#10;                    getWindow().setNavigationBarColor(getResources().getColor(android.R.color.black, getTheme()));&#10;                }&#10;            } catch (Exception fallbackException) {&#10;                android.util.Log.e(&quot;WelcomeActivity&quot;, &quot;Fallback also failed&quot;, fallbackException);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Chỉ check login state khi activity đã được resume hoàn toàn&#10;        checkLoginState();&#10;    }&#10;&#10;    private void checkLoginState() {&#10;        // Đảm bảo activity không bị destroyed&#10;        if (isDestroyed() || isFinishing()) {&#10;            return;&#10;        }&#10;&#10;        try {&#10;            // Check SharedPreferences first&#10;            if (LoginPreferences.isLoggedIn(this)) {&#10;                // Also check Firebase Auth state&#10;                FirebaseUser currentUser = mAuth.getCurrentUser();&#10;                if (currentUser != null) {&#10;                    // User is still authenticated, go to home&#10;                    navigateToHome(currentUser);&#10;                } else {&#10;                    // Firebase session expired, clear saved login state&#10;                    LoginPreferences.clearLoginState(this);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            android.util.Log.e(&quot;WelcomeActivity&quot;, &quot;Error checking login state&quot;, e);&#10;        }&#10;    }&#10;&#10;    private void navigateToHome(FirebaseUser user) {&#10;        // Đảm bảo activity không bị destroyed trước khi navigate&#10;        if (isDestroyed() || isFinishing()) {&#10;            return;&#10;        }&#10;&#10;        // First check if user needs pairing&#10;        checkPairingStatus(user);&#10;    }&#10;&#10;    private void checkPairingStatus(FirebaseUser user) {&#10;        // Đảm bảo activity không bị destroyed&#10;        if (isDestroyed() || isFinishing()) {&#10;            return;&#10;        }&#10;&#10;        try {&#10;            // Check if user is already paired before going to HomeMainActivity&#10;            com.example.couple_app.managers.DatabaseManager databaseManager =&#10;                    com.example.couple_app.managers.DatabaseManager.getInstance();&#10;&#10;            databaseManager.getCoupleByUserId(user.getUid(), new com.example.couple_app.managers.DatabaseManager.DatabaseCallback&lt;com.example.couple_app.models.Couple&gt;() {&#10;                @Override&#10;                public void onSuccess(com.example.couple_app.models.Couple couple) {&#10;                    // Kiểm tra lại activity state trước khi navigate&#10;                    if (isDestroyed() || isFinishing()) {&#10;                        return;&#10;                    }&#10;&#10;                    // User is already paired, go to HomeMainActivity&#10;                    Intent intent = new Intent(WelcomeActivity.this, HomeMainActivity.class);&#10;                    if (user != null) {&#10;                        intent.putExtra(&quot;user_name&quot;, user.getDisplayName() != null ? user.getDisplayName() : LoginPreferences.getUserName(WelcomeActivity.this));&#10;                        intent.putExtra(&quot;user_email&quot;, user.getEmail());&#10;                        intent.putExtra(&quot;user_id&quot;, user.getUid());&#10;                        intent.putExtra(&quot;coupleId&quot;, couple.getCoupleId());&#10;                    }&#10;&#10;                    try {&#10;                        startActivity(intent);&#10;                        finish();&#10;                    } catch (Exception e) {&#10;                        android.util.Log.e(&quot;WelcomeActivity&quot;, &quot;Error starting HomeMainActivity&quot;, e);&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    // Kiểm tra lại activity state trước khi navigate&#10;                    if (isDestroyed() || isFinishing()) {&#10;                        return;&#10;                    }&#10;&#10;                    // User is not paired yet, go to PairingActivity&#10;                    Intent intent = new Intent(WelcomeActivity.this, PairingActivity.class);&#10;                    try {&#10;                        startActivity(intent);&#10;                        finish();&#10;                    } catch (Exception e) {&#10;                        android.util.Log.e(&quot;WelcomeActivity&quot;, &quot;Error starting PairingActivity&quot;, e);&#10;                    }&#10;                }&#10;            });&#10;        } catch (Exception e) {&#10;            android.util.Log.e(&quot;WelcomeActivity&quot;, &quot;Error in checkPairingStatus&quot;, e);&#10;        }&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        // Setup click listeners using actual IDs from welcome.xml layout&#10;&#10;        // Phone login button -&gt; redirect to LoginByPhoneActivity&#10;        setupClickListener(R.id.btnLoginPhone, () -&gt; {&#10;            Intent intent = new Intent(WelcomeActivity.this, LoginByPhoneActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        // Email login button -&gt; redirect to Google login&#10;        setupClickListener(R.id.btnLoginMail, this::signInWithGoogle);&#10;&#10;        // Sign up text -&gt; redirect to SignUpActivity&#10;        setupClickListener(R.id.tv_signup, () -&gt; {&#10;            Intent intent = new Intent(WelcomeActivity.this, SignUpActivity.class);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    private void setupClickListener(int viewId, Runnable action) {&#10;        try {&#10;            android.view.View view = findViewById(viewId);&#10;            if (view != null) {&#10;                view.setOnClickListener(v -&gt; action.run());&#10;            }&#10;        } catch (Exception e) {&#10;            // Ignore if view ID doesn't exist&#10;        }&#10;    }&#10;&#10;    private void signInWithGoogle() {&#10;        // Clear any existing Google sign-in to force account selection&#10;        mGoogleSignInClient.signOut().addOnCompleteListener(this, task -&gt; {&#10;            // After signing out, start the sign-in process which will show account picker&#10;            Intent signInIntent = mGoogleSignInClient.getSignInIntent();&#10;            googleSignInLauncher.launch(signInIntent);&#10;        });&#10;    }&#10;&#10;    private void firebaseAuthWithGoogle(String idToken) {&#10;        AuthCredential credential = GoogleAuthProvider.getCredential(idToken, null);&#10;&#10;        // First, get the Google account info to check email&#10;        GoogleSignInAccount lastSignedInAccount = GoogleSignIn.getLastSignedInAccount(this);&#10;        if (lastSignedInAccount != null &amp;&amp; lastSignedInAccount.getEmail() != null) {&#10;            String googleEmail = lastSignedInAccount.getEmail();&#10;&#10;            // Check if this email exists in Firestore database&#10;            com.example.couple_app.managers.DatabaseManager.getInstance().checkEmailExists(&#10;                googleEmail,&#10;                new com.example.couple_app.managers.DatabaseManager.DatabaseCallback&lt;com.example.couple_app.models.User&gt;() {&#10;                    @Override&#10;                    public void onSuccess(com.example.couple_app.models.User existingUser) {&#10;                        if (existingUser != null) {&#10;                            // Email exists in database, proceed with Firebase Auth&#10;                            proceedWithGoogleLogin(credential);&#10;                        } else {&#10;                            // Email not found in database&#10;                            showAccountNotFoundDialog(googleEmail);&#10;                        }&#10;                    }&#10;&#10;                    @Override&#10;                    public void onError(String error) {&#10;                        Toast.makeText(WelcomeActivity.this,&#10;                            &quot;Lỗi kiểm tra tài khoản: &quot; + error, Toast.LENGTH_LONG).show();&#10;                    }&#10;                }&#10;            );&#10;        } else {&#10;            // Fallback: proceed with Firebase Auth if can't get email&#10;            proceedWithGoogleLogin(credential);&#10;        }&#10;    }&#10;&#10;    private void proceedWithGoogleLogin(AuthCredential credential) {&#10;        mAuth.signInWithCredential(credential)&#10;                .addOnCompleteListener(this, task -&gt; {&#10;                    if (task.isSuccessful()) {&#10;                        // Sign in success&#10;                        FirebaseUser user = mAuth.getCurrentUser();&#10;                        if (user != null) {&#10;                            // Save login state to SharedPreferences&#10;                            LoginPreferences.saveLoginState(&#10;                                    this,&#10;                                    true,&#10;                                    user.getEmail(),&#10;                                    user.getDisplayName() != null ? user.getDisplayName() : &quot;&quot;,&#10;                                    user.getUid()&#10;                            );&#10;&#10;                            Toast.makeText(this, &quot;Đăng nhập Google thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                            navigateToHome(user);&#10;                        }&#10;                    } else {&#10;                        // Sign in failed&#10;                        String errorMessage = task.getException() != null ? task.getException().getMessage() : &quot;Unknown error&quot;;&#10;                        Toast.makeText(this, errorMessage, Toast.LENGTH_LONG).show();&#10;                    }&#10;                });&#10;    }&#10;&#10;    private void showAccountNotFoundDialog(String email) {&#10;        new androidx.appcompat.app.AlertDialog.Builder(this)&#10;                .setTitle(&quot;Tài khoản chưa tồn tại&quot;)&#10;                .setMessage(&quot;Email &quot; + email + &quot; chưa được đăng ký trong hệ thống.\n\n&quot; +&#10;                           &quot;Bạn cần tạo tài khoản trước khi đăng nhập bằng Google.&quot;)&#10;                .setPositiveButton(&quot;Đăng ký ngay&quot;, (dialog, which) -&gt; {&#10;                    // Navigate to sign up screen&#10;                    Intent intent = new Intent(WelcomeActivity.this, SignUpActivity.class);&#10;                    intent.putExtra(&quot;google_email&quot;, email); // Pass Google email to pre-fill&#10;                    startActivity(intent);&#10;                })&#10;                .setNegativeButton(&quot;Đóng&quot;, (dialog, which) -&gt; {&#10;                    // Sign out from Google to clear selection&#10;                    mGoogleSignInClient.signOut();&#10;                })&#10;                .setCancelable(false)&#10;                .setIcon(android.R.drawable.ic_dialog_info)&#10;                .show();&#10;    }&#10;&#10;    @Override&#10;    protected void onStart() {&#10;        super.onStart();&#10;        // Check login state every time the activity starts&#10;        checkLoginState();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>